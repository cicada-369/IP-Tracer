#!/bin/bash

# IP Tracer Script
# Description: Comprehensive IP address investigation using open-source tools and threat intelligence APIs
# Usage: ./ip_tracer.sh <IP_ADDRESS>
#        ./ip_tracer.sh -f <IP_LIST_FILE>
#        ./ip_tracer.sh --batch <IP_LIST_FILE>
# Author: Security Analysis Tool
# Version: 2.2

# API Configuration (set these as environment variables or edit directly)
ABUSEIPDB_API_KEY="${ABUSEIPDB_API_KEY:-xxx}" # Get from: https://www.abuseipdb.com/api
VIRUSTOTAL_API_KEY="${VIRUSTOTAL_API_KEY:-xxx}" # Get from: https://www.virustotal.com/gui/join-us
SHODAN_API_KEY="${SHODAN_API_KEY:-xxx}" # Get from: https://account.shodan.io/
CENSYS_API_ID="${CENSYS_API_ID:-xxx}" # Get from: https://search.censys.io/account/api
CENSYS_API_SECRET="${CENSYS_API_SECRET:-xxx}" # Get from: https://search.censys.io/account/api
SECURITYTRAILS_API_KEY="${SECURITYTRAILS_API_KEY:-xxx}" # Get from: https://securitytrails.com/corp/api

# Color codes for output formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored headers
print_header() {
    echo -e "${BLUE}=================================================================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${BLUE}=================================================================================${NC}"
}

# Function to print section headers
print_section() {
    echo -e "\n${YELLOW}>>> $1${NC}"
    echo "----------------------------------------"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to validate IP address format
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        IFS='.' read -ra ADDR <<< "$ip"
        for i in "${ADDR[@]}"; do
            if [[ $i -lt 0 || $i -gt 255 ]]; then
                return 1
            fi
        done
        return 0
    else
        return 1
    fi
}

# Function to process single IP
process_single_ip() {
    local target_ip=$1
    local batch_mode=${2:-false}
    local current_ip_num=${3:-1}
    local total_ips=${4:-1}
    
    # Validate IP address format
    if ! validate_ip "$target_ip"; then
        echo -e "${RED}Error: Invalid IP address format: $target_ip${NC}"
        if [[ "$batch_mode" == "true" ]]; then
            echo "Skipping invalid IP: $target_ip"
            return 1
        else
            exit 1
        fi
    fi
    
    # Create output filename with date and IP
    local date_str=$(date +%Y%m%d)
    local time_str=$(date +%H%M%S)
    local output_file="ip_trace_${target_ip}_${date_str}_${time_str}.txt"
    
    # Function to output both to console and file
    output_both() {
        echo -e "$1" | tee -a "$output_file"
    }
    
    # Function to output to file only (for colored headers that don't work well in files)
    output_file_only() {
        echo "$1" >> "$output_file"
    }
    
    # Initialize output file
    echo "IP TRACER REPORT" > "$output_file"
    echo "=================================================================================" >> "$output_file"
    echo "Target IP: $target_ip" >> "$output_file"
    if [[ "$batch_mode" == "true" ]]; then
        echo "Batch Mode: IP $current_ip_num of $total_ips" >> "$output_file"
    fi
    echo "Analysis Date: $(date)" >> "$output_file"
    echo "Generated by: IP Tracer Script v2.2" >> "$output_file"
    echo "=================================================================================" >> "$output_file"
    echo "" >> "$output_file"
    
    if [[ "$batch_mode" == "true" ]]; then
        print_header "IP TRACER - Processing IP $current_ip_num/$total_ips: $target_ip"
    else
        print_header "IP TRACER - Investigating: $target_ip"
    fi
    echo -e "${GREEN}Started at: $(date)${NC}"
    echo -e "${CYAN}Results will be saved to: $output_file${NC}\n"
    
    # 1. Basic Connectivity Test with Ping
    print_section "1. CONNECTIVITY TEST (ping)"
    output_file_only "1. CONNECTIVITY TEST (ping)"
    output_file_only "----------------------------------------"
    if command_exists ping; then
        echo "Testing connectivity to $target_ip..."
        output_file_only "Testing connectivity to $target_ip..."
        ping_result=$(ping -c 4 -W 3 "$target_ip" 2>/dev/null || echo "Host appears to be unreachable or blocking ICMP")
        echo "$ping_result"
        output_file_only "$ping_result"
    else
        echo -e "${RED}ping command not found${NC}"
        output_file_only "ping command not found"
    fi
    output_file_only ""
    
    # 2. WHOIS Information
    print_section "2. WHOIS INFORMATION"
    output_file_only "2. WHOIS INFORMATION"
    output_file_only "----------------------------------------"
    if command_exists whois; then
        echo "Gathering WHOIS data for $target_ip..."
        output_file_only "Gathering WHOIS data for $target_ip..."
        whois_result=$(whois "$target_ip" | head -30)
        echo "$whois_result"
        echo "..."
        echo "[Full WHOIS output truncated - showing first 30 lines]"
        output_file_only "$whois_result"
        output_file_only "..."
        output_file_only "[Full WHOIS output truncated - showing first 30 lines]"
    else
        echo -e "${RED}whois command not found${NC}"
        output_file_only "whois command not found"
    fi
    output_file_only ""
    
    # 3. DNS Lookups (Reverse DNS)
    print_section "3. DNS INFORMATION (nslookup/dig)"
    output_file_only "3. DNS INFORMATION (nslookup/dig)"
    output_file_only "----------------------------------------"
    
    # Using nslookup for reverse DNS
    if command_exists nslookup; then
        echo "Reverse DNS lookup using nslookup:"
        output_file_only "Reverse DNS lookup using nslookup:"
        nslookup_result=$(nslookup "$target_ip" 2>/dev/null | grep -E "(name|Name)" || echo "No reverse DNS record found")
        echo "$nslookup_result"
        output_file_only "$nslookup_result"
    else
        echo -e "${YELLOW}nslookup not available${NC}"
        output_file_only "nslookup not available"
    fi
    
    # Using dig for reverse DNS (more detailed)
    if command_exists dig; then
        echo -e "\nReverse DNS lookup using dig:"
        output_file_only ""
        output_file_only "Reverse DNS lookup using dig:"
        dig_result=$(dig -x "$target_ip" +short 2>/dev/null || echo "No reverse DNS record found")
        echo "$dig_result"
        output_file_only "$dig_result"
        
        echo -e "\nDNS TXT records (if any):"
        output_file_only ""
        output_file_only "DNS TXT records (if any):"
        txt_result=$(dig "$target_ip" TXT +short 2>/dev/null || echo "No TXT records found")
        echo "$txt_result"
        output_file_only "$txt_result"
    else
        echo -e "${YELLOW}dig not available${NC}"
        output_file_only "dig not available"
    fi
    output_file_only ""
    
    # 4. Network Path Tracing
    print_section "4. NETWORK PATH TRACING (traceroute)"
    output_file_only "4. NETWORK PATH TRACING (traceroute)"
    output_file_only "----------------------------------------"
    if command_exists traceroute; then
        echo "Tracing network path to $target_ip..."
        output_file_only "Tracing network path to $target_ip..."
        trace_result=$(timeout 30 traceroute -n -m 15 "$target_ip" 2>/dev/null || echo "Traceroute failed or timed out")
        echo "$trace_result"
        output_file_only "$trace_result"
    elif command_exists tracepath; then
        echo "Tracing network path using tracepath..."
        output_file_only "Tracing network path using tracepath..."
        tracepath_result=$(timeout 30 tracepath -n "$target_ip" 2>/dev/null || echo "Tracepath failed or timed out")
        echo "$tracepath_result"
        output_file_only "$tracepath_result"
    else
        echo -e "${RED}Neither traceroute nor tracepath found${NC}"
        output_file_only "Neither traceroute nor tracepath found"
    fi
    output_file_only ""
    
    # 5. Port Scanning and OS Detection
    print_section "5. PORT SCANNING & OS DETECTION (nmap)"
    output_file_only "5. PORT SCANNING & OS DETECTION (nmap)"
    output_file_only "----------------------------------------"
    if command_exists nmap; then
        echo "Scanning common ports on $target_ip..."
        echo "Note: This may take a few minutes and could be detected by security systems"
        output_file_only "Scanning common ports on $target_ip..."
        output_file_only "Note: This may take a few minutes and could be detected by security systems"
        
        # Quick scan of common ports
        nmap_result=$(nmap -T4 -F -O --osscan-guess "$target_ip" 2>/dev/null || {
            echo "OS detection failed, trying basic port scan..."
            nmap -T4 -F "$target_ip" 2>/dev/null
        })
        echo "$nmap_result"
        output_file_only "$nmap_result"
    else
        echo -e "${RED}nmap command not found${NC}"
        output_file_only "nmap command not found"
    fi
    output_file_only ""
    
    # 6. IP Geolocation using APIs
    print_section "6. GEOLOCATION INFORMATION (curl/wget)"
    output_file_only "6. GEOLOCATION INFORMATION (curl/wget)"
    output_file_only "----------------------------------------"
    
    # Using curl with ipinfo.io
    if command_exists curl; then
        echo "Querying ipinfo.io for geolocation data:"
        output_file_only "Querying ipinfo.io for geolocation data:"
        ipinfo_result=$(curl -s "http://ipinfo.io/$target_ip/json" | grep -E '"(ip|city|region|country|org|postal|timezone)"' || echo "API query failed")
        echo "$ipinfo_result"
        output_file_only "$ipinfo_result"
        
        echo -e "\nQuerying ip-api.com for additional data:"
        output_file_only ""
        output_file_only "Querying ip-api.com for additional data:"
        ipapi_result=$(curl -s "http://ip-api.com/json/$target_ip" | grep -E '"(query|country|regionName|city|isp|org|as)"' || echo "API query failed")
        echo "$ipapi_result"
        output_file_only "$ipapi_result"
        
    elif command_exists wget; then
        echo "Using wget to query geolocation APIs:"
        output_file_only "Using wget to query geolocation APIs:"
        wget_result=$(wget -qO- "http://ipinfo.io/$target_ip/json" | grep -E '"(ip|city|region|country|org|postal|timezone)"' || echo "API query failed")
        echo "$wget_result"
        output_file_only "$wget_result"
    else
        echo -e "${RED}Neither curl nor wget found${NC}"
        output_file_only "Neither curl nor wget found"
    fi
    output_file_only ""
    
    # 7. Reputation and Security Checks
    print_section "7. REPUTATION & SECURITY ANALYSIS"
    output_file_only "7. REPUTATION & SECURITY ANALYSIS"
    output_file_only "----------------------------------------"
    
    # Check against AbuseIPDB
    echo -e "Checking AbuseIPDB for $target_ip..."
    output_file_only "Checking AbuseIPDB for $target_ip..."
    if [[ -n "$ABUSEIPDB_API_KEY" && "$ABUSEIPDB_API_KEY" != "xxx" ]]; then
        if command_exists curl; then
            ABUSE_OUTPUT=$(curl -s -G "https://api.abuseipdb.com/api/v2/check" \
                --data-urlencode "ipAddress=$target_ip" \
                -H "Key: $ABUSEIPDB_API_KEY" \
                -H "Accept: application/json" 2>/dev/null)
            
            if command_exists jq; then
                abuse_result=$(echo "$ABUSE_OUTPUT" | jq '.data' 2>/dev/null || echo "Failed to parse AbuseIPDB response")
                echo "$abuse_result"
                output_file_only "$abuse_result"
            else
                abuse_result=$(echo "$ABUSE_OUTPUT" | grep -E '"(abuseConfidencePercentage|countryCode|usageType|isp)"' || echo "AbuseIPDB check completed (install jq for formatted output)")
                echo "$abuse_result"
                output_file_only "$abuse_result"
            fi
        else
            echo -e "${RED}curl required for AbuseIPDB API${NC}"
            output_file_only "curl required for AbuseIPDB API"
        fi
    else
        echo -e "${YELLOW}AbuseIPDB API key not configured. Set ABUSEIPDB_API_KEY environment variable or edit script${NC}"
        output_file_only "AbuseIPDB API key not configured. Set ABUSEIPDB_API_KEY environment variable or edit script"
    fi
    
    # Check VirusTotal
    echo -e "\nChecking VirusTotal for $target_ip..."
    output_file_only ""
    output_file_only "Checking VirusTotal for $target_ip..."
    if [[ -n "$VIRUSTOTAL_API_KEY" && "$VIRUSTOTAL_API_KEY" != "xxx" ]]; then
        if command_exists curl; then
            VT_OUTPUT=$(curl -s --request GET \
                --url "https://www.virustotal.com/vtapi/v2/ip-address/report?apikey=$VIRUSTOTAL_API_KEY&ip=$target_ip" 2>/dev/null)
            
            if command_exists jq; then
                vt_result=$(echo "$VT_OUTPUT" | jq '.' 2>/dev/null || echo "Failed to parse VirusTotal response")
                echo "$vt_result"
                output_file_only "$vt_result"
            else
                vt_result=$(echo "$VT_OUTPUT" | grep -E '"(detected_urls|resolutions|response_code)"' || echo "VirusTotal check completed (install jq for formatted output)")
                echo "$vt_result"
                output_file_only "$vt_result"
            fi
        else
            echo -e "${RED}curl required for VirusTotal API${NC}"
            output_file_only "curl required for VirusTotal API"
        fi
    else
        echo -e "${YELLOW}VirusTotal API key not configured. Set VIRUSTOTAL_API_KEY environment variable or edit script${NC}"
        output_file_only "VirusTotal API key not configured. Set VIRUSTOTAL_API_KEY environment variable or edit script"
    fi
    output_file_only ""
    
    # Check Shodan
    echo -e "\nChecking Shodan for $target_ip..."
    output_file_only ""
    output_file_only "Checking Shodan for $target_ip..."
    if [[ -n "$SHODAN_API_KEY" && "$SHODAN_API_KEY" != "xxx" ]]; then
        if command_exists curl; then
            SHODAN_OUTPUT=$(curl -s "https://api.shodan.io/shodan/host/$target_ip?key=$SHODAN_API_KEY" 2>/dev/null)
            
            if command_exists jq; then
                shodan_result=$(echo "$SHODAN_OUTPUT" | jq '{ip: .ip_str, org: .org, isp: .isp, country: .country_name, city: .city, ports: .ports, hostnames: .hostnames, vulns: .vulns}' 2>/dev/null || echo "Failed to parse Shodan response or no data found")
                echo "$shodan_result"
                output_file_only "$shodan_result"
            else
                shodan_result=$(echo "$SHODAN_OUTPUT" | grep -E '"(ip_str|org|isp|country_name|city|ports|hostnames)"' || echo "Shodan check completed (install jq for formatted output)")
                echo "$shodan_result"
                output_file_only "$shodan_result"
            fi
        else
            echo -e "${RED}curl required for Shodan API${NC}"
            output_file_only "curl required for Shodan API"
        fi
    else
        echo -e "${YELLOW}Shodan API key not configured. Set SHODAN_API_KEY environment variable or edit script${NC}"
        output_file_only "Shodan API key not configured. Set SHODAN_API_KEY environment variable or edit script"
    fi
    
    # Check Censys
    echo -e "\nChecking Censys for $target_ip..."
    output_file_only ""
    output_file_only "Checking Censys for $target_ip..."
    if [[ -n "$CENSYS_API_ID" && "$CENSYS_API_ID" != "xxx" && -n "$CENSYS_API_SECRET" && "$CENSYS_API_SECRET" != "xxx" ]]; then
        if command_exists curl; then
            # Censys IPv4 hosts API
            CENSYS_OUTPUT=$(curl -s -u "$CENSYS_API_ID:$CENSYS_API_SECRET" \
                "https://search.censys.io/api/v2/hosts/$target_ip" 2>/dev/null)
            
            if command_exists jq; then
                censys_result=$(echo "$CENSYS_OUTPUT" | jq '{ip: .ip, location: .location, autonomous_system: .autonomous_system, services: .services | map({port: .port, service_name: .service_name, software: .software}), operating_system: .operating_system}' 2>/dev/null || echo "Failed to parse Censys response or no data found")
                echo "$censys_result"
                output_file_only "$censys_result"
            else
                censys_result=$(echo "$CENSYS_OUTPUT" | grep -E '"(ip|location|autonomous_system|services|operating_system)"' || echo "Censys check completed (install jq for formatted output)")
                echo "$censys_result"
                output_file_only "$censys_result"
            fi
        else
            echo -e "${RED}curl required for Censys API${NC}"
            output_file_only "curl required for Censys API"
        fi
    else
        echo -e "${YELLOW}Censys API credentials not configured. Set CENSYS_API_ID and CENSYS_API_SECRET environment variables or edit script${NC}"
        output_file_only "Censys API credentials not configured. Set CENSYS_API_ID and CENSYS_API_SECRET environment variables or edit script"
    fi
    
    # Check SecurityTrails
    echo -e "\nChecking SecurityTrails for $target_ip..."
    output_file_only ""
    output_file_only "Checking SecurityTrails for $target_ip..."
    if [[ -n "$SECURITYTRAILS_API_KEY" && "$SECURITYTRAILS_API_KEY" != "xxx" ]]; then
        if command_exists curl; then
            # Get IP information from SecurityTrails
            ST_OUTPUT=$(curl -s -H "APIKEY: $SECURITYTRAILS_API_KEY" \
                "https://api.securitytrails.com/v1/ips/nearby/$target_ip" 2>/dev/null)
            
            if command_exists jq; then
                st_result=$(echo "$ST_OUTPUT" | jq '.blocks[]? | {cidr: .cidr, organization: .organization}' 2>/dev/null || echo "Failed to parse SecurityTrails response or no data found")
                echo "$st_result"
                output_file_only "$st_result"
                
                # Also get passive DNS data
                echo -e "\nSecurityTrails Passive DNS data:"
                output_file_only ""
                output_file_only "SecurityTrails Passive DNS data:"
                ST_DNS_OUTPUT=$(curl -s -H "APIKEY: $SECURITYTRAILS_API_KEY" \
                    "https://api.securitytrails.com/v1/ips/$target_ip" 2>/dev/null)
                st_dns_result=$(echo "$ST_DNS_OUTPUT" | jq '.hostnames[]? | {hostname: .hostname, first_seen: .first_seen, last_seen: .last_seen}' 2>/dev/null || echo "No passive DNS data found")
                echo "$st_dns_result"
                output_file_only "$st_dns_result"
            else
                st_result=$(echo "$ST_OUTPUT" | grep -E '"(cidr|organization)"' || echo "SecurityTrails check completed (install jq for formatted output)")
                echo "$st_result"
                output_file_only "$st_result"
            fi
        else
            echo -e "${RED}curl required for SecurityTrails API${NC}"
            output_file_only "curl required for SecurityTrails API"
        fi
    else
        echo -e "${YELLOW}SecurityTrails API key not configured. Set SECURITYTRAILS_API_KEY environment variable or edit script${NC}"
        output_file_only "SecurityTrails API key not configured. Set SECURITYTRAILS_API_KEY environment variable or edit script"
    fi
    output_file_only ""
    # 8. Additional Network Information
    print_section "8. ADDITIONAL OSINT SOURCES"
    output_file_only "8. ADDITIONAL OSINT SOURCES"
    output_file_only "----------------------------------------"
    
    # Manual OSINT sources
    echo "Additional manual OSINT sources for $target_ip:"
    output_file_only "Additional manual OSINT sources for $target_ip:"
    
    echo "- Threat Intelligence:"
    echo "  * GreyNoise: https://viz.greynoise.io/ip/$target_ip"
    echo "  * AlienVault OTX: https://otx.alienvault.com/indicator/ip/$target_ip"
    echo "  * ThreatCrowd: https://www.threatcrowd.org/ip.php?ip=$target_ip"
    echo "  * Hybrid Analysis: https://www.hybrid-analysis.com/search?query=$target_ip"
    
    output_file_only "- Threat Intelligence:"
    output_file_only "  * GreyNoise: https://viz.greynoise.io/ip/$target_ip"
    output_file_only "  * AlienVault OTX: https://otx.alienvault.com/indicator/ip/$target_ip"
    output_file_only "  * ThreatCrowd: https://www.threatcrowd.org/ip.php?ip=$target_ip"
    output_file_only "  * Hybrid Analysis: https://www.hybrid-analysis.com/search?query=$target_ip"
    
    echo "- Reputation & Blacklists:"
    echo "  * MXToolbox: https://mxtoolbox.com/SuperTool.aspx?action=blacklist%3a$target_ip"
    echo "  * Spamhaus: https://www.spamhaus.org/lookup/"
    echo "  * IBM X-Force: https://exchange.xforce.ibmcloud.com/ip/$target_ip"
    echo "  * Cisco Talos: https://talosintelligence.com/reputation_center/lookup?search=$target_ip"
    
    output_file_only "- Reputation & Blacklists:"
    output_file_only "  * MXToolbox: https://mxtoolbox.com/SuperTool.aspx?action=blacklist%3a$target_ip"
    output_file_only "  * Spamhaus: https://www.spamhaus.org/lookup/"
    output_file_only "  * IBM X-Force: https://exchange.xforce.ibmcloud.com/ip/$target_ip"
    output_file_only "  * Cisco Talos: https://talosintelligence.com/reputation_center/lookup?search=$target_ip"
    
    echo "- Network & Infrastructure:"
    echo "  * BGPView: https://bgpview.io/ip/$target_ip"
    echo "  * Hurricane Electric: https://bgp.he.net/ip/$target_ip"
    echo "  * IPinfo.io: https://ipinfo.io/$target_ip"
    echo "  * RIPE Stat: https://stat.ripe.net/$target_ip"
    
    output_file_only "- Network & Infrastructure:"
    output_file_only "  * BGPView: https://bgpview.io/ip/$target_ip"
    output_file_only "  * Hurricane Electric: https://bgp.he.net/ip/$target_ip"
    output_file_only "  * IPinfo.io: https://ipinfo.io/$target_ip"
    output_file_only "  * RIPE Stat: https://stat.ripe.net/$target_ip"
    
    # Check for common ports if nmap is not available
    if ! command_exists nmap && command_exists nc; then
        echo -e "\nChecking common ports with netcat:"
        output_file_only ""
        output_file_only "Checking common ports with netcat:"
        common_ports=(22 23 25 53 80 110 143 443 993 995 3389 5432)
        for port in "${common_ports[@]}"; do
            if timeout 2 nc -z "$target_ip" "$port" 2>/dev/null; then
                echo "Port $port: Open"
                output_file_only "Port $port: Open"
            fi
        done
    fi
    
    output_file_only ""
    
    print_header "INVESTIGATION COMPLETE"
    output_file_only ""
    output_file_only "INVESTIGATION COMPLETE"
    output_file_only "================================================================================="
    echo -e "${GREEN}Analysis of $target_ip completed at: $(date)${NC}"
    echo -e "${CYAN}Full report saved to: $output_file${NC}"
    echo -e "${YELLOW}Note: This information is for legitimate network analysis purposes only${NC}"
    echo -e "${YELLOW}Always ensure you have proper authorization before scanning networks${NC}"
    
    output_file_only "Analysis of $target_ip completed at: $(date)"
    output_file_only "Note: This information is for legitimate network analysis purposes only"
    output_file_only "Always ensure you have proper authorization before scanning networks"
    output_file_only ""
    output_file_only "Report generated by IP Tracer Script v2.2"
    
    # Add to batch summary if in batch mode
    if [[ "$batch_mode" == "true" ]]; then
        echo "$target_ip,$output_file,$(date)" >> "batch_summary_${date_str}_${time_str}.csv"
        return 0
    fi
}

# Function to process batch of IPs from file
process_batch() {
    local ip_file=$1
    
    # Check if file exists
    if [[ ! -f "$ip_file" ]]; then
        echo -e "${RED}Error: File '$ip_file' not found${NC}"
        exit 1
    fi
    
    # Read and validate file content
    local ip_list=()
    local line_num=0
    
    while IFS= read -r line || [[ -n "$line" ]]; do
        ((line_num++))
        # Skip empty lines and comments
        if [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]]; then
            continue
        fi
        
        # Remove leading/trailing whitespace
        line=$(echo "$line" | xargs)
        
        # Basic IP format validation
        if validate_ip "$line"; then
            ip_list+=("$line")
        else
            echo -e "${YELLOW}Warning: Invalid IP format on line $line_num: '$line' - skipping${NC}"
        fi
    done < "$ip_file"
    
    # Check if any valid IPs found
    if [[ ${#ip_list[@]} -eq 0 ]]; then
        echo -e "${RED}Error: No valid IP addresses found in '$ip_file'${NC}"
        exit 1
    fi
    
    local total_ips=${#ip_list[@]}
    local date_str=$(date +%Y%m%d)
    local time_str=$(date +%H%M%S)
    local batch_summary="batch_summary_${date_str}_${time_str}.csv"
    
    # Initialize batch summary file
    echo "IP_Address,Report_File,Completion_Time" > "$batch_summary"
    
    print_header "BATCH IP TRACER - Processing $total_ips IPs from $ip_file"
    echo -e "${GREEN}Batch started at: $(date)${NC}"
    echo -e "${CYAN}Batch summary will be saved to: $batch_summary${NC}"
    echo -e "${YELLOW}Processing $total_ips IP addresses...${NC}\n"
    
    local success_count=0
    local error_count=0
    local current_ip=1
    
    # Process each IP
    for ip in "${ip_list[@]}"; do
        echo -e "${BLUE}[$(date +%H:%M:%S)] Processing IP $current_ip/$total_ips: $ip${NC}"
        
        if process_single_ip "$ip" "true" "$current_ip" "$total_ips"; then
            ((success_count++))
            echo -e "${GREEN}✓ Successfully processed $ip${NC}"
        else
            ((error_count++))
            echo -e "${RED}✗ Failed to process $ip${NC}"
        fi
        
        # Add delay between IPs to be respectful to APIs and avoid rate limiting
        if [[ $current_ip -lt $total_ips ]]; then
            echo -e "${CYAN}Waiting 10 seconds before next IP (API rate limiting)...${NC}"
            sleep 10
        fi
        
        ((current_ip++))
        echo ""
    done
    
    # Final summary
    print_header "BATCH PROCESSING COMPLETE"
    echo -e "${GREEN}Batch completed at: $(date)${NC}"
    echo -e "${CYAN}Total IPs processed: $total_ips${NC}"
    echo -e "${GREEN}Successful: $success_count${NC}"
    echo -e "${RED}Errors: $error_count${NC}"
    echo -e "${CYAN}Batch summary saved to: $batch_summary${NC}"
    echo -e "${YELLOW}Individual reports generated for each IP${NC}"
    echo ""
    echo -e "${PURPLE}Generated files:${NC}"
    echo "- $batch_summary (batch summary)"
    ls -la ip_trace_*_${date_str}_${time_str}.txt 2>/dev/null | sed 's/^/- /'
}

# Main execution function
main() {
    local input=$1
    local flag=${2:-""}
    
    # Handle different input modes
    case "$input" in
        "-f"|"--file"|"--batch")
            if [[ -z "$flag" ]]; then
                echo -e "${RED}Error: No file specified${NC}"
                echo "Usage: $0 -f <IP_LIST_FILE>"
                exit 1
            fi
            process_batch "$flag"
            ;;
        "--help"|"-h")
            show_help
            exit 0
            ;;
        "--check")
            check_dependencies
            exit 0
            ;;
        "")
            echo -e "${RED}Error: No input provided${NC}"
            show_help
            exit 1
            ;;
        *)
            # Handle file input with -f flag
            if [[ "$flag" == "-f" || "$flag" == "--file" || "$flag" == "--batch" ]]; then
                process_batch "$input"
            else
                # Single IP processing
                if [[ -z "$input" ]]; then
                    echo -e "${RED}Error: No IP address provided${NC}"
                    show_help
                    exit 1
                fi
                process_single_ip "$input" "false"
            fi
            ;;
    esac
}

# Function to show help
show_help() {
    echo "IP Tracer Script v2.2"
    echo ""
    echo "USAGE:"
    echo "  Single IP:     $0 <IP_ADDRESS>"
    echo "  Batch mode:    $0 -f <IP_LIST_FILE>"
    echo "  Batch mode:    $0 --batch <IP_LIST_FILE>"
    echo "  Check deps:    $0 --check"
    echo "  Show help:     $0 --help"
    echo ""
    echo "EXAMPLES:"
    echo "  $0 8.8.8.8"
    echo "  $0 -f suspicious_ips.txt"
    echo "  $0 --batch ip_list.txt"
    echo ""
    echo "IP LIST FILE FORMAT:"
    echo "  - One IP address per line"
    echo "  - Empty lines and lines starting with # are ignored"
    echo "  - Example:"
    echo "    # Suspicious IPs to investigate"
    echo "    8.8.8.8"
    echo "    1.1.1.1"
    echo "    192.168.1.1"
    echo ""
    echo "FEATURES:"
    echo "  - Single IP analysis with detailed reporting"
    echo "  - Batch processing of multiple IPs"
    echo "  - Automatic report generation with timestamps"
    echo "  - Batch summary CSV file"
    echo "  - Rate limiting for API protection"
    echo "  - Comprehensive security analysis"
    echo "  - Multiple threat intelligence sources:"
    echo "    * AbuseIPDB - IP reputation and abuse reports"
    echo "    * VirusTotal - Malware and URL analysis"
    echo "    * Shodan - Internet-connected device data"
    echo "    * Censys - Certificate and service information"
    echo "    * SecurityTrails - Historical DNS and passive DNS"
    echo "  - Network reconnaissance tools (nmap, traceroute, etc.)"
    echo "  - Geolocation and ISP information"
    echo ""
    echo "OUTPUT FILES:"
    echo "  Single IP:  ip_trace_<IP>_<DATE>_<TIME>.txt"
    echo "  Batch:      individual reports + batch_summary_<DATE>_<TIME>.csv"
    echo ""
    echo "API CONFIGURATION:"
    echo "  Set environment variables:"
    echo "  export ABUSEIPDB_API_KEY='your_key_here'"
    echo "  export VIRUSTOTAL_API_KEY='your_key_here'"
    echo "  export SHODAN_API_KEY='your_key_here'"
    echo "  export CENSYS_API_ID='your_id_here'"
    echo "  export CENSYS_API_SECRET='your_secret_here'"
    echo "  export SECURITYTRAILS_API_KEY='your_key_here'"
    echo ""
    echo "API SOURCES:"
    echo "  - AbuseIPDB: https://www.abuseipdb.com/api"
    echo "  - VirusTotal: https://www.virustotal.com/gui/join-us"
    echo "  - Shodan: https://account.shodan.io/"
    echo "  - Censys: https://search.censys.io/account/api"
    echo "  - SecurityTrails: https://securitytrails.com/corp/api"
}

# Check for required tools and provide installation suggestions
check_dependencies() {
    echo "Checking for required tools..."
    missing_tools=()
    
    tools=("ping" "whois" "nslookup" "dig" "traceroute" "nmap" "curl" "jq")
    
    for tool in "${tools[@]}"; do
        if ! command_exists "$tool"; then
            missing_tools+=("$tool")
        fi
    done
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        echo -e "${YELLOW}Missing tools: ${missing_tools[*]}${NC}"
        echo "Install suggestions:"
        echo "  Ubuntu/Debian: sudo apt-get install dnsutils traceroute nmap curl whois jq"
        echo "  CentOS/RHEL: sudo yum install bind-utils traceroute nmap curl whois jq"
        echo "  macOS: brew install nmap wget jq"
        echo ""
    fi
}

# Script execution starts here
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Handle different argument patterns
    if [[ $# -eq 0 ]]; then
        echo -e "${RED}Error: No arguments provided${NC}"
        show_help
        exit 1
    elif [[ $# -eq 1 ]]; then
        main "$1"
    elif [[ $# -eq 2 ]]; then
        # Handle -f flag in either position
        if [[ "$1" == "-f" || "$1" == "--file" || "$1" == "--batch" ]]; then
            main "$1" "$2"
        elif [[ "$2" == "-f" || "$2" == "--file" || "$2" == "--batch" ]]; then
            main "$2" "$1"
        else
            echo -e "${RED}Error: Invalid arguments${NC}"
            show_help
            exit 1
        fi
    else
        echo -e "${RED}Error: Too many arguments${NC}"
        show_help
        exit 1
    fi
fi